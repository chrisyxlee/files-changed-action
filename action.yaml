# Copyright 2023 Chris Lee (chrisyxlee)
# SPDX-License-Identifier: Apache-2.0

name: 'files-changed-action'
description: |
  This action finds all modified files between the source and destination SHA
  and pattern matches against a set of regex.

inputs:
  include:
    description: |
      A list of patterns to match against.
    required: false
    default: |
      .*

  exclude:
    description: |
      A list of patterns to exclude from the match. The diffs will be filtered
      prior to checking the include list. If this list is empty, nothing will
      be filtered out.
    required: false

  base_ref:
    description: |
      The reference to the commit that contains the base changes to diff against.
    required: false

  head_ref:
    description: |
      The reference to the commit that contains the latest changes.
    required: false

  output_diffs:
    description: |
      Whether to log information about what happens after each filtering step.
    required: false
    default: 'true'

outputs:
  modified:
    description: |
      Whether files between the base_ref and head_ref commit were modified after excluding
      and looking for included files.
    value: ${{ steps.files-changed.outputs.modified }}

runs:
  using: "composite"
  steps:
  - name: Determine commits to compare
    id: get-commits
    shell: bash
    run: |
      set -e
      set -u
      set -o pipefail

      cd "${GITHUB_WORKSPACE}" || exit 1

      echo "${{ github.event.pull_request }}"
      echo "${{ github.event.pull_request.head.sha }}"
      echo "${{ github.event.pull_request.base.sha }}"
      if [ -n "${{ inputs.head_ref }}" ]; then
        echo "User defined head_ref."
        echo "head_ref=${{ inputs.head_ref }}" >> $GITHUB_OUTPUT
      elif [ -n "${{ github.event.pull_request.head.sha }}" ]; then
        echo "Detecting pull request, using github.event.pull_request.head.sha"
        echo "head_ref=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
      else
        echo "No input. Setting head to GITHUB_SHA."
        echo "head_ref=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      fi

      if [ -n "${{ inputs.base_ref }}" ]; then
        echo "User defined base_ref."
        echo "base_ref=${{ inputs.base_ref }}" >> $GITHUB_OUTPUT
      elif [ -n "${{ github.event.pull_request.base.sha }}" ]; then
        echo "Detecting pull request, using github.event.pull_request.base.sha"
        echo "base_ref=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
      else
        echo "No input for base_ref. Diffing against last commit."
        echo "base_ref=HEAD~1" >> $GITHUB_OUTPUT
      fi

  - name: Check files changed
    id: files-changed
    shell: bash
    run: |
      set -e
      set -u
      set -o pipefail

      cd "${GITHUB_WORKSPACE}" || exit 1

      set +e
      DIFFS=$(git diff --name-only ${{ steps.get-commits.outputs.head_ref }} ${{ steps.get-commits.outputs.base_ref }})
      if [ $? -ne 0 ]; then
        >&2 echo "You may need 'fetch-depth: 2' for your checkout action."
        exit 1
      fi
      set -e
      DIFFS=$(echo "${DIFFS}" | xargs)

      if [ "${{ inputs.output_diffs }}" = 'true' ]; then
        echo '::group:: All files changed.'
        echo "$(echo "${DIFFS}" | tr ' ' '\n')"
        echo '::endgroup::'
      fi

      EXCLUDED=$(cat <<EOF
      ${{ inputs.exclude }}
      EOF
      )
      EXCLUDED=$(echo "${EXCLUDED}" | xargs)

      if [ "${{ inputs.output_diffs }}" = 'true' ]; then
        echo '::group:: Exclusion group.'
        echo "$(echo "${EXCLUDED}" | tr ' ' '\n')"
        echo '::endgroup::'
      fi

      if [ -n "${EXCLUDED}" ]; then
        echo "${EXCLUDED}" | tr ' ' '\n' | while read EXC; do
          DIFFS=$(echo "${DIFFS}" | tr ' ' '\n' |  grep -v "${EXC}")
        done
      fi

      if [ "${{ inputs.output_diffs }}" = 'true' ]; then
        echo '::group:: After filtering out excluded.'
        echo "$(echo "${DIFFS}" | tr ' ' '\n')"
        echo '::endgroup::'
      fi

      INCLUDED=$(cat <<EOF
      ${{ inputs.include }}
      EOF
      )
      INCLUDED=$(echo "${INCLUDED}" | xargs)

      if [ "${{ inputs.output_diffs }}" = 'true' ]; then
        echo '::group:: Inclusion group.'
        echo "$(echo "${INCLUDED}" | tr ' ' '\n')"
        echo '::endgroup::'
      fi

      echo "${INCLUDED}" | tr ' ' '\n' | while read INC; do
        if [ -n "${INC}" ]; then
          # Allow failures when we can't find anything.
          set +e
          MATCH=$(echo "${DIFFS}" | tr ' ' '\n' | grep "${INC}")
          if [ $? -eq 0 ]; then
            set -e
            if [ "${{ inputs.output_diffs }}" = 'true' ]; then
              echo "::group:: Matched on pattern ${INC}."
              echo "$(echo "${MATCH}" | tr ' ' '\n')"
              echo '::endgroup::'
            fi
            echo "Setting modified to true."
            echo 'modified=true' >> $GITHUB_OUTPUT
            break
          fi
          set -e
        fi
      done
